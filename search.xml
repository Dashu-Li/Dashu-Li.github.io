<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刚体力学笔记</title>
      <link href="2021/12/05/%E5%88%9A%E4%BD%93%E5%8A%9B%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>2021/12/05/%E5%88%9A%E4%BD%93%E5%8A%9B%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="转动惯量"><a href="#转动惯量" class="headerlink" title="转动惯量"></a>转动惯量</h3><p>一个刚体的<strong>转动惯量</strong>定义为</p><script type="math/tex; mode=display">I=\sum_im_i{r_i}^2</script><span id="more"></span><p>$m_i$指刚体上第$i$个质点的质量，$r_i$指刚体上第$i$个质点到转轴的距离。转动惯量在研究刚体转动中的地位与刚体质量在研究刚体平动时的地位相当。</p><p>下面讨论几种常见物体的转动惯量。</p><ul><li><p>圆环（转轴在圆心处，垂直圆面）</p><p>由于圆环上所有点到圆环的距离均为$R$，则根据转动惯量的定义，有</p><script type="math/tex; mode=display">I=mR^2</script></li><li><p>圆盘（转轴在圆心处，垂直圆面）</p><p>采用微元思想，可将圆盘分为一个个圆环求。应用上面结论，可知</p><script type="math/tex; mode=display">I=\int_0^R\mathrm dm\cdot r^2</script><p>其中，$\mathrm dm$为分出的圆环质量。$r$为圆环半径。圆环宽度极细，为$\mathrm dr$，此时圆环面积趋近于圆环长与圆环宽度的乘积，即$\mathrm dS=2\pi r\mathrm dr$。则</p><script type="math/tex; mode=display">\mathrm dm=\sigma\cdot\mathrm dS=\sigma\cdot2\pi r\mathrm dr</script><p>$\sigma$为圆盘面密度，有$\sigma=\cfrac{m}{\pi R^2}$。带入上式，可得</p><script type="math/tex; mode=display">\begin{aligned}I&=\int_0^R\mathrm dm\cdot r^2\\&=\int_0^R\sigma\cdot2\pi r\mathrm dr\cdot r^2\\&=2\pi\sigma\int_0^Rr^3\mathrm dr\\&=2\pi\cdot\frac{m}{\pi R^2}\cdot\frac{1}{4}R^4\\&=\frac{1}{2}mR^2\end{aligned}</script></li><li><p>球壳（转轴通过球心）</p><p>仍然采用微元思想，将球壳由上到下分为一个个圆环。若每个圆环的纬度设为$\theta$，又上下两个半球转动惯量相同，应用上面结论，有</p><script type="math/tex; mode=display">I=2\int_0^\frac{\pi}{2}\mathrm dm\cdot(R\cos\theta)^2</script><p>此时$\mathrm dS=2\pi R\cos\theta\cdot R\mathrm d\theta$，$\mathrm dm=\sigma\cdot\mathrm dS=\sigma\cdot2\pi R\cos\theta\cdot R\mathrm d\theta$，$\sigma=\cfrac{m}{4\pi R^2}$。均代入上式，有</p><script type="math/tex; mode=display">\begin{aligned}I&=2\int_0^\frac{\pi}{2}\mathrm dm\cdot(R\cos\theta)^2\\&=2\int_0^\frac{\pi}{2}\sigma\cdot2\pi R\cos\theta\cdot R\mathrm d\theta\cdot R^2\cos^2\theta\\&=4\pi\sigma R^4\int_0^\frac{\pi}{2}\cos^3\theta\mathrm d\theta\\&=4\pi\cdot\cfrac{m}{4\pi R^2}\cdot R^4\int_0^\frac{\pi}{2}(1-\sin^2\theta)\mathrm d\sin\theta\\&=mR^2\left(\eval{\sin\theta}_0^\frac{\pi}{2}-\frac{1}{3}\eval{\sin^3\theta}_0^\frac{\pi}{2}\right)\\&=mR^2\left(1-\frac{1}{3}\right)\\&=\frac{2}{3}mR^2\end{aligned}</script></li><li><p>球体（转轴通过球心）</p><p>将球体分为一层一层球壳来求。应用上面结论，可知</p><script type="math/tex; mode=display">I=\int_0^R\frac{2}{3}\mathrm dm\cdot r^2</script><p>此时$\mathrm dm=\rho\mathrm dV$，$\rho$为球体密度，即$\rho=\cfrac{m}{\frac{4}{3}\pi R^3}$。而球壳厚度极薄，为$\mathrm dr$，则球壳体积趋近于球壳表面积与球壳厚度的乘积，即$\mathrm dV=4\pi r^2\mathrm dr$。因此，$\mathrm dm=\rho\cdot4\pi r^2\mathrm dr$。代入上式，得</p><script type="math/tex; mode=display">\begin{aligned}I&=\int_0^R\frac{2}{3}\mathrm dm\cdot r^2\\&=\int_0^R\frac{2}{3}\rho\cdot4\pi r^2\mathrm dr\cdot r^2\\&=\frac{8}{3}\pi\rho\int_0^Rr^4\mathrm dr\\&=\frac{8}{3}\pi\cdot\cfrac{m}{\frac{4}{3}\pi R^3}\cdot\frac{1}{5}R^5\\&=\frac{2}{5}mR^5\end{aligned}</script></li></ul><h3 id="刚体的定轴转动"><a href="#刚体的定轴转动" class="headerlink" title="刚体的定轴转动"></a>刚体的定轴转动</h3><ol><li><p><strong>动能</strong></p><p>刚体绕轴以角速度$\omega$旋转。将刚体转动的动能拆分成其上每一个质点的动能之和</p><script type="math/tex; mode=display">E_k=\sum_i\frac{1}{2}m_i(\omega r_i)^2=\frac{1}{2}\left(\sum_im_i{r_i}^2\right)\omega^2</script><p>由<strong>转动惯量</strong>的定义，可知</p><script type="math/tex; mode=display">E_k=\frac{1}{2}\left(\sum_im_i{r_i}^2\right)\omega^2=\frac{1}{2}I\omega^2</script></li><li><p><strong>角动量</strong></p><p>刚体绕轴以角速度$\boldsymbol\omega$旋转。与上面采用同样的方法，将刚体转动的角动量拆分成其上每一个质点的角动量之和</p><script type="math/tex; mode=display">\boldsymbol L=\sum_i\boldsymbol L_i=\sum_i\boldsymbol r_i\times m_i(\boldsymbol\omega\times\boldsymbol r_i)</script><p>当所有的$\boldsymbol L_i$都与$\boldsymbol\omega$方向相同时，有</p><script type="math/tex; mode=display">\boldsymbol L=\sum_im_i{r_i}^2\boldsymbol\omega=\left(\sum_im_i{r_i}^2\right)\boldsymbol\omega</script><p>由<strong>转动惯量</strong>的定义，可知</p><script type="math/tex; mode=display">\boldsymbol L=I\boldsymbol\omega</script></li><li><p><strong>力矩与角加速度</strong></p><p>当角速度方向与角动量方向相同时，由上可知</p><script type="math/tex; mode=display">\boldsymbol L=I\boldsymbol\omega</script><p>等式两边分别对$t$求导，即得</p><script type="math/tex; mode=display">\boldsymbol M=I\boldsymbol\beta</script><p>这就是力矩与角加速度的关系。该式在研究刚体转动中的地位与牛顿第二定律在研究刚体平动中的地位相当。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 物理 </category>
          
          <category> 力学 </category>
          
          <category> 刚体 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理竞赛/PhO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角形中描述边关系的定理及其证明</title>
      <link href="2021/10/19/%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%AD%E6%8F%8F%E8%BF%B0%E8%BE%B9%E5%85%B3%E7%B3%BB%E7%9A%84%E5%AE%9A%E7%90%86%E5%8F%8A%E5%85%B6%E8%AF%81%E6%98%8E/"/>
      <url>2021/10/19/%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%AD%E6%8F%8F%E8%BF%B0%E8%BE%B9%E5%85%B3%E7%B3%BB%E7%9A%84%E5%AE%9A%E7%90%86%E5%8F%8A%E5%85%B6%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>注：本篇中所指的“边”是<strong>一切和三角形有关的边</strong>，包括但不限于中线、角平分线、梅氏线等。</p><h3 id="Menelaus定理"><a href="#Menelaus定理" class="headerlink" title="Menelaus定理"></a>Menelaus定理</h3><span id="more"></span><p>根据我的做题经验，这个定理极为有用，适用面很广。因此，将其置于此篇文章的首位，是不无道理的。</p><p><img src="/.io//Menelaus_1.png" alt="Menelaus" style="zoom:15%;"></p><ul><li><p><strong>Menelaus定理</strong>：如图，在$\triangle ABC$​中，一直线与$\triangle ABC$​的边$AB,AC,BC$​（或其延长线）分别交于点$D,E,F$​​。则有：</p><script type="math/tex; mode=display">\frac{AD}{DB}\cdot\frac{BF}{FC}\cdot\frac{CE}{EA}=1</script><p>其中，$\triangle ABC$​被称为<strong>梅氏三角形</strong>，直线$DEF$​是$\triangle ABC$​​的<strong>梅氏线</strong>。</p></li><li><p><strong>记忆口诀</strong>：<strong>顶点</strong>（梅氏三角形的顶点）到<strong>交点</strong>（梅氏线与梅氏三角形的交点），交点回顶点。</p></li><li><p><strong>定理证明</strong></p><p><img src="/.io//Menelaus_2.png" alt="Menelaus" style="zoom:15%;"></p><p>如图，过点$C$​作$CP/\mskip-4mu/DE$​交$AB$于点$P$。<br>则根据<strong>平行线分线段成比例定理</strong>，有</p><script type="math/tex; mode=display">\frac{BF}{FC}=\frac{BD}{DP}\\\frac{CE}{EA}=\frac{PD}{DA}</script><p>所以</p><script type="math/tex; mode=display">\frac{AD}{DB}\cdot\frac{BF}{FC}\cdot\frac{CE}{EA}=\frac{AD}{DB}\cdot\frac{BD}{DP}\cdot\frac{PD}{DA}=1</script><p>证毕。</p></li></ul><h3 id="Ceva定理"><a href="#Ceva定理" class="headerlink" title="Ceva定理"></a>Ceva定理</h3><p><strong>Ceva定理</strong>的应用不如<strong>Menelaus定理</strong>那么广泛，但仍是极为实用的定理。尤其是<strong>Ceva定理</strong>与<strong>Menelaus定理</strong>有着密切的关联，</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
          <category> 几何 </category>
          
          <category> 三角形 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三角形 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿喀琉斯与龟问题探究</title>
      <link href="2021/08/06/%E9%98%BF%E5%96%80%E7%90%89%E6%96%AF%E4%B8%8E%E9%BE%9F%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/"/>
      <url>2021/08/06/%E9%98%BF%E5%96%80%E7%90%89%E6%96%AF%E4%B8%8E%E9%BE%9F%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="古希腊の悖论"><a href="#古希腊の悖论" class="headerlink" title="古希腊の悖论"></a>古希腊の悖论</h3><p>“阿喀琉斯与龟”的悖论相信大家都有所耳闻。芝诺（Zeno）通过这一论述，得出“阿喀琉斯永远追不上乌龟”的结论，显然是荒谬的。假设阿喀琉斯的速度为$v_1$​​，乌龟的速度为$v_2$​​，$v_1&gt;v_2$​​，出发时两者之<br><span id="more"></span><br>间的距离为$L$​​，显然阿喀琉斯将在$t=\dfrac{L}{v_1-v_2}$​​时追上乌龟。由于结论错误，则论证必错。那么问题到底出在哪呢？</p><h3 id="问题探索"><a href="#问题探索" class="headerlink" title="问题探索"></a>问题探索</h3><p>问题就在于，一切具有重复性的过程都可以作为“钟”，用其重复次数来度量时间，而芝诺在论证中使用了两种不同的时间度量方式。一种是我们日常用的时间，不妨记为$t$。而芝诺采用的另一种神奇的“钟”使用的重复性过程是：阿喀琉斯逐次到达乌龟前一次的出发点。我们不妨称其为“芝诺时”，记为$t’$。为揭开此悖论的秘密，我们要求出$t$与$t’$的变换关系。</p><p>在$t’=1$时，阿喀琉斯到达乌龟的第一个出发点，此时$t=\dfrac{L}{v_1}$。在这段时间里，乌龟又走了$v_2t=\dfrac{L}{v_1}\cdot v_2$的路程。因此，在$t’=2$时，阿喀琉斯到达乌龟的第二个出发点，$t=\dfrac{L}{v_1}+\dfrac{L}{v_1}\cdot\dfrac{v_2}{v_1}$。我们不妨列一张表，帮助我们寻找规律。</p><div class="table-container"><table><thead><tr><th style="text-align:center">芝诺时（$t’$​）</th><th style="text-align:center">普通时（$t$）</th></tr></thead><tbody><tr><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td></tr><tr><td style="text-align:center">$1$</td><td style="text-align:center">$\dfrac{L}{v_1}$</td></tr><tr><td style="text-align:center">$2$</td><td style="text-align:center">$\dfrac{L}{v_1}+\dfrac{L}{v_1}\cdot\dfrac{v_2}{v_1}$</td></tr><tr><td style="text-align:center">$3$</td><td style="text-align:center">$\dfrac{L}{v_1}+\dfrac{L}{v_1}\cdot\dfrac{v_2}{v_1}+\dfrac{L}{v_1}\cdot\left(\dfrac{v_2}{v_1}\right)^2$</td></tr><tr><td style="text-align:center">$\vdots$</td><td style="text-align:center">$\vdots$</td></tr><tr><td style="text-align:center">$n$</td><td style="text-align:center">$\dfrac{L}{v_1}+\dfrac{L}{v_1}\cdot\dfrac{v_2}{v_1}+\dfrac{L}{v_1}\cdot\left(\dfrac{v_2}{v_1}\right)^2+\cdots+\dfrac{L}{v_1}\cdot\left(\dfrac{v_2}{v_1}\right)^{n-1}$</td></tr></tbody></table></div><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>从表中得到$t’=n$时，对应的</p><script type="math/tex; mode=display">t=\frac{L}{v_1}+\frac{L}{v_1}\cdot\frac{v_2}{v_1}+\frac{L}{v_1}\cdot\left(\frac{v_2}{v_1}\right)^2+\cdots+\frac{L}{v_1}\cdot\left(\frac{v_2}{v_1}\right)^{n-1}</script><p>运用等比数列求和的方法，得到</p><script type="math/tex; mode=display">t=\frac{L}{v_1}\cdot\frac{1-\left(\frac{v_2}{v_1}\right)^n}{1-\frac{v_2}{v_1}}=\frac{L}{v_1-v_2}\left[1-\left(\frac{v_2}{v_1}\right)^n\right]</script><p>所以$t$和$t’$的变换关系为</p><script type="math/tex; mode=display">t=\frac{L}{v_1-v_2}\left[1-\left(\frac{v_2}{v_1}\right)^{t'}\right]</script><p>此式被称为芝诺变换。</p><p>根据芝诺变换，容易看出，由于$v_1&gt;v_2$​，则$\dfrac{v_2}{v_1}&lt;1$​，从而当$t’\to\infty$​时，$\left(\dfrac{v_2}{v_1}\right)^{t’}=0$​。所以，当$t’\to\infty$​时有</p><script type="math/tex; mode=display">t=\frac{L}{v_1-v_2}</script><p>即阿喀琉斯追上乌龟的时间。由此发现，在普通时$t$下阿喀琉斯追上乌龟时，芝诺时$t’$已经到达了无穷大，所以芝诺才会得出“阿喀琉斯永远追不上乌龟”的结论。</p><h3 id="探究总结"><a href="#探究总结" class="headerlink" title="探究总结"></a>探究总结</h3><p>可以看到，芝诺的计时方法“芝诺时”有其局限性，在其达到无穷大时普通时只不过经历了一段有限的时间。可以想象，当下已知的宇宙万物的种种规律也有其局限性。而正是这种局限性，激励着人类一代又一代永不停息地接力探索！我们青年一代，也要为不断突破科学的局限而努力奋斗！</p>]]></content>
      
      
      <categories>
          
          <category> 物理 </category>
          
          <category> 力学 </category>
          
          <category> 运动学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理竞赛/PhO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合肥市第四十五中学辩论 第一场：同学之间借钱应当立字据 素材</title>
      <link href="2021/05/08/%E5%90%88%E8%82%A5%E5%B8%82%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%94%E4%B8%AD%E5%AD%A6%E8%BE%A9%E8%AE%BA-%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%9A%E5%90%8C%E5%AD%A6%E4%B9%8B%E9%97%B4%E5%80%9F%E9%92%B1%E5%BA%94%E5%BD%93%E7%AB%8B%E5%AD%97%E6%8D%AE-%E7%B4%A0%E6%9D%90/"/>
      <url>2021/05/08/%E5%90%88%E8%82%A5%E5%B8%82%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%94%E4%B8%AD%E5%AD%A6%E8%BE%A9%E8%AE%BA-%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%9A%E5%90%8C%E5%AD%A6%E4%B9%8B%E9%97%B4%E5%80%9F%E9%92%B1%E5%BA%94%E5%BD%93%E7%AB%8B%E5%AD%97%E6%8D%AE-%E7%B4%A0%E6%9D%90/</url>
      
        <content type="html"><![CDATA[<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ol><li><p>1938年6月，粟裕率领新四军先遣支队在韦岗打了一场漂亮的伏击战，战斗仅半个小时便把日军打得溃不成军，共计毙伤日军土井少佐、梅泽武四郎大尉以下20余人，缴获长短枪20余支，击毁日军汽车4辆。粟裕不负众望，首战告捷，叶挺和项英闻报很振奋，令全军向先遣支队学习，蒋氏也<span id="more"></span>来电嘉奖：“叶军长所属粟部，袭击韦岗，斩获颇多，殊堪嘉尚。”</p><p>第三战区第二游击区中将副总指挥兼江南行署主任冷欣，当年曾在苏区的浒湾与粟裕对阵交手，算是打出来的“老相识”。粟裕屡次打了胜仗，缴获颇多，冷欣派人客客气气过来找粟裕，说要借几样战利品，作为回报，他们可以提供军需品给新四军。粟裕的老部下张铚秀晚年回忆：“他们向我们要日本步枪两支、手枪一支、军刀一把、望远镜一具、军大衣一件、军帽一顶、皮鞋一双等。甚至要以一挺机枪换一支步枪。”</p><p>粟裕婉言拒绝了：“你们要的话，我们可以送给你们，只要第三战区长官司令部打个收条。”来人面面相觑，沉默不语，呆坐一会儿悄然离去。张铚秀说：“当时我们很不理解，对粟裕有所埋怨，说人家出高价同我们交换，赚钱的生意为什么不做？”粟裕对他们说：“你们都是小傻瓜，如果按来人的意思办了，我们就上当了！”他解释说，冷欣若得到这些日本武器装备，就可以拍照片到处吹牛皮，说这仗是他们打的。</p><p>大家这才恍然大悟，咧嘴笑了。</p></li><li><p>亲朋好友之间借钱大大方方地把借条事宜放到台面上来，明明白白地谈钱，这才不伤感情，才能保证“有借有还再借不难”，才能保证友情亲情可以进行到底。</p><p>近日，河南一女子跪着求人还钱的视频引起网友热议。亲朋好友之间借钱，这种事情日常生活中常常会遇到，对于很多人而言，借与不借都会有点烦恼。不借的话，有驳情面；借的话，往往也不好意思立字据，万一遇到扯皮耍无赖，最后撕破脸连朋友都做不成。于是，很多人也感慨：亲朋好友之间最好不要有利益的牵扯。基于此，也有不少人会找种种理由拒绝借钱，拒绝卷入亲朋好友之间的债务关系当中。</p><p>亲朋好友之间借钱确实容易尴尬，处理不好还会失去原本的融洽关系，这种尴尬到底怎么避免？说到底还是要靠契约精神而不是单单靠两人之间的情义。亲朋好友属于熟人，虽说熟人之间对彼此的人品有一定了解，熟人社会中的社会关系对借款一方也会形成一定的信用压力，但是不能否认利益的驱使之下人性中有自私的可能，而且口说无凭式的借款容易滋生道德风险。</p><p>不写借条，不留证据，口说无凭，不仅很难诉诸法律，甚至连熟人社会里的道德谴责或舆论压力也使不上劲，结果只能是好心吃了哑巴亏。相信，有过一次这样的经历，以后再有亲朋好友借钱就很难了。但朋友是什么？真正的朋友情正是体现在身处困境时候的相互扶持，这其中就包括力所能及的经济上的帮衬。</p><p>亲朋好友愿意借钱，表明重情义、讲感情，作为借钱的人来说，不仅不能责怪对方对自己提要求，更应该自己主动写借条，以此避免对方尴尬。打借条，代表的不是不信任，而是一种契约精神的体现。这种契约精神是现代文明和现代法治的基础，应该成为生活中的常态，陌生人之间是如此，熟人之间亦是如此。俗话说，亲兄弟明算账。因此，首先要消除亲朋好友之间打借条就是伤感情的偏见，亲朋好友之间借钱大大方方地把借条事宜放到台面上来，明明白白地谈钱，这才不伤感情，才能保证“有借有还再借不难”，才能保证友情亲情可以进行到底。</p></li><li><p><strong>余光中《借钱的境界》</strong></p><p> 一提起借钱，没有几个人不胆战心惊的。有限的几张钞票，好端端地隐居在自己口袋里，忽然一只手伸过来把它带走，真教人一点安全感都没有。借钱的威胁不下于核子战争：后者毕竟不常发生，而且同难者众，前者的命中率却是百分之百，天下之大，那只手却是朝你一个人伸过来的。</p><p>   借钱，实在是一件紧张的事，富于戏剧性。借钱是一种神经战，紧张的程度，可比求婚，因为两者都是秘密进行，而面临的答复，至少有一半可能是“不肯”。不同的是，成功的求婚人留下，永远留下，失败的求婚人离去，永远离去；可是借钱的人，无论成功或失败，永远有去无回，除非他再来借钱。</p><p>   除非有奇迹发生，借出去的钱，是不会自动回来的。所谓“借”，实在只是一种雅称。“借”的理论，完全建筑在“还”的假设上。有了这个大胆假设，借钱的人才能名正言顺，理直气壮，贷钱的人才能心安理得，至少也不致于毫无希望。也许当初，借的人确有还的诚意，至少有一种决心要还的幻觉。等到借来的钱用光了，事过境迁，第二种幻觉便渐渐形成。他会觉得，那一笔钱本来是“无中生有”变出来的，现在要他“重归于无”变回去，未免有点不甘心。“谁教他比我有钱呢？”朦朦胧胧之中，升起了这个念头。“天之道损有余而补不足。人之道则不然，损不足以奉有余。”当初就是因为不足，才需要向人借钱，现在要还钱给人，岂非损不足以奉有余，简直有背天道了。日子一久，还钱的念头渐渐由淡趋无。</p><p>   久借不还，“借”就变了质，成为——成为什么呢？“偷”吗？明明是当面发生的事情，不能叫偷。“抢”吗？也不能算抢，因为对方明明同意。借钱和这两件事最大的不同，就是后者往往施于陌生人，而前者往往行于亲朋之间。此外，偷和抢定义分明，只要出了手，罪行便告成立。久借不还——也许就叫“赖”吧？——对“受害人”的影响虽然相似，其“罪”本身却是渐渐形成的。只要借者心存还钱之念，那么，就算事过三年五载，“赖”的行为仍不能成立。“不是不还，而是还没有还。”这中间的道理，真是微妙极了。</p><p>   借钱，实在是介于艺术和战术之间的事情。其实呢，贷方比借方更处于不利之境。借钱之难，难在启齿。等到开了口，不，开了价，那块“热山芋”就抛给对方了。借钱需要勇气，不借，恐怕需要更大的勇气吧。这时，“受害人”的贷方，惶恐觳觫，嗫嚅沉吟，一副搜索枯肠，藉词推托的样子。技巧就在这里了。资深的借钱人反而神色泰然，眈眈注视对方，大有法官逼供犯人之概。在这种情势下，无论那“犯人”提出什么理由，都显得像在说谎。招架乏力，没有几个人不终于乖乖拿出钱来的。所谓“终于”，其实过程很短，“不到一盏茶工夫”，客人早已得手。“月底一定奉还”，到了门口，客人再三保证。“不忙不忙，慢慢来。”主人再三安慰，大有孟尝君的气派。</p><p>   当然是慢慢来，也许就不再来了。问题是，孟尝君的太太未必都像孟尝君那么大度。而那笔钱，不大不小，本来也许足够把自己久想购买却迟疑不忍下手的一样东西买回家来，现在竟入了他人囊中，好不恼人。月底早过去了。等那客人来还吗？不可能。催他来还吗？那怎么可以！借钱不还，最多引起众人畏惧，说不定还能赢人同情。至于向人索债，那简直是卑鄙，守财奴的作风，将不见容于江湖。何况索债往往失败；失财于前，失友于后，花钱去买绝交，还有更愚蠢的事吗？</p><p>   既然是这样，借钱出去，就不该等人来还。所谓“借钱”给人，事实上等于“送钱”给人，区别在于：“借钱”给人，并不能赢得慷慨的美名，更不能赢得借者的感激，因为“借”是期待“还”的，动机本来就不算高贵。参透了这点道理，真正聪明的人，应该干脆送钱，而绝不借钱给人。钱，横竖是丢定了，何不磊磊落落，大大方方，丢得有声有色，“某某真够朋友！”听起来岂不过瘾。</p><p>   当然，借钱的一方也不是毫无波折的。面露寒酸之色，口吐嗫嚅之言，所索又不过升斗之需，这是“低姿势”的借法，在战术上早落了下风。在借贷的世界里，似乎有一个公式，那就是，开价愈低，借成的机会愈小。照理区区之数，应该很容易借到，何至碰壁。问题在于，开价既低，来客的境遇穷蹇可知，身份也必然卑微。“兔子小开口”，充其量不过要一根胡萝卜巴。谁耐烦去敷衍一只兔子呢？</p><p>   如果来者是一个资深的借钱人，他就懂得先要大开其口。“已经在别处筹了七八万，能不能再调两万五千，让我周转一下？”狮子搏兔，喧宾夺主，一时形势互易，主人忽然变成了一只小兔子。小兔子就算捐躯成仁，恐怕也难塞大狮的牙缝。这样一来，自卑感就从客人转移到主人，借钱的人趾高气扬，出钱的人反而无地自容了。“真对不起，近来我也一——（也怎么样呢？“捉襟见肘”吗？还是“三餐不继”呢？又不是你在借钱，何苦这么自贬？）——我也——先拿三千去，怎么样？”一面舌结唇颤，等待狮子宣判。“好吧。就先给我——五千好了。”两万五千减成一个零头，显得既豪爽，又体贴，感激的反而是主人。潜意识里面，好像是客人免了他两万，而不是他拿给客人五千。这是“中姿势”的借法。</p><p>  至于“高姿势”，那里面的学问就太大了，简直有一点天人之际的意味。善借者不是向私人，而是向国家借。借的藉口不再是一根胡萝卜，而是好几根烟囱。借的对象不再是个人，而是千百万人。债主的人数等于人口的总数，反而不像欠任何人的钱了。至于怎么还法，甚至要不要还，岂是胡萝卜的境界所能了解的。</p><p>  此之谓“大借若还”。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 校园 </category>
          
          <category> 辩论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 辩论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试根法浅析</title>
      <link href="2021/03/09/%E8%AF%95%E6%A0%B9%E6%B3%95%E6%B5%85%E6%9E%90/"/>
      <url>2021/03/09/%E8%AF%95%E6%A0%B9%E6%B3%95%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="余数定理"><a href="#余数定理" class="headerlink" title="余数定理"></a>余数定理</h3><p>对于$n$次多项式$f(x)=\sum\limits_{k=1}^na_kx^k+a_0$，如果我们用一次多项式$x-c$作除式去除多项式$f(x)$，那么所得余式必为一个常数。不妨设这时商式为$g(x)$，余式（余数）为$r$，则：</p><span id="more"></span><script type="math/tex; mode=display">f(x)=(x-c)g(x)+r</script><p>即被除式等于除式乘以商式再加余式。</p><p>令$x=c$，便得到：</p><script type="math/tex; mode=display">f(c)=0+r=r</script><p>因此，我们有</p><p><strong>$\qquad$$x-c$除$f(x)$时，所得的余数为$f(c)$。</strong></p><p>这个结论被称为<strong>余数定理</strong>。</p><h3 id="试根法分解因式"><a href="#试根法分解因式" class="headerlink" title="试根法分解因式"></a>试根法分解因式</h3><p>在上面的推导中，若余数是$0$，那么$f(x)$被$x-c$整除，也就是$x-c$是$f(x)$的因式。反过来，若$x-c$是$f(x)$的因式，那么$f(x)$被$x-c$整除，余数是$0$。因此，我们有</p><p><strong>$\qquad$如果$f(c)=0$，那么$x-c$是$f(x)$的因式。反过来，如果$x-c$是$f(x)$的因式，那么$f(c)=0$。</strong></p><p>因此，想要分解$f(x)$，只需找出一个$c$，使得$f(c)=0$，那么$f(x)$必可分解出因式$x-c$。</p><p>如果$f(c)=0$，那么就说$c$是多项式$f(x)$的根。因此，在$c$是$f(x)$的根时，$x-c$是$f(x)$的因式。</p><h3 id="有理根的求法"><a href="#有理根的求法" class="headerlink" title="有理根的求法"></a>有理根的求法</h3><p>我们假定$f(x)=\sum\limits_{k=1}^na_kx^k+a_0$是整系数多项式，也就是说$a_n,a_{n-1},\cdots,a_1,a_0\in\mathbb{Z}$。又设有理数$c=\frac{p}{q}$是$f(x)$的根，$(p,q)=1$。</p><p>由于$f(c)=0$，即</p><script type="math/tex; mode=display">a_n\left(\frac{p}{q}\right)^n+a_{n-1}\left(\frac{p}{q}\right)^{n-1}+\cdots+a_1\left(\frac{p}{q}\right)+a_0=0</script><p>两边同乘$q^n$得</p><script type="math/tex; mode=display">a_np^n+a_{n-1}p^{n-1}q+\cdots+a_1pq^{n-1}+a_0q^n=0</script><p>该式右边被$p$整除，所以它的左边也被$p$整除。显然，左边的前$n$项都被$p$整除，所以最后一项$a_0q^n$也被$p$整除，但$(p,q)=1$，所以$p|a_0$，即$p$是$a_0$的因数。同样地，$q$应当整除$a_np^n$，从而$q$是$a_n$的因数。于是，可得</p><p><strong>$\qquad$有理根$c=\frac{p}{q}$的分子$p$是常数项$a_0$的因数，分母$q$是首项系数$a_n$的因数。</strong></p><p>据此，我们就可以有的放矢地将有理数代入$f(x)$进行试根。当找出一个有理根$c$后，便可根据第二部分的结论分解出因式$x-c$。</p><p>不过需要注意的是，这个结论仅适用于整系数多项式。对于非整系数多项式，需要先将其化为整系数多项式，再进行试根。</p><h3 id="应用：二次式的分解"><a href="#应用：二次式的分解" class="headerlink" title="应用：二次式的分解"></a>应用：二次式的分解</h3><p>对于$x$的二次式$ax^2+bx+c$在复数集内的分解，可以先利用求根公式求出它的根：</p><script type="math/tex; mode=display">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</script><p>从而，可分解为：</p><script type="math/tex; mode=display">ax^2+bx+c=a\left(x-\frac{-b+\sqrt{b^2-4ac}}{2a}\right)\left(x-\frac{-b-\sqrt{b^2-4ac}}{2a}\right)</script><p>在实数集内，当$b^2-4ac\ge0$时，$ax^2+bx+c$也可以这样分解。如果$b^2-4ac&lt;0$，那么$ax^2+bx+c$是实数集内的既约多项式。</p><h3 id="应用：韦达定理的推广"><a href="#应用：韦达定理的推广" class="headerlink" title="应用：韦达定理的推广"></a>应用：韦达定理的推广</h3><p>韦达定理阐释了一元二次方程的根与系数关系。那么，一元$n$次方程是否有类似结论呢？</p><p><strong>$\qquad$在复数集内，每一个$x$的（不是常数的）多项式至少有一个根。即对于多项式$f(x)=\sum\limits_{k=1}^na_kx^k+a_0(n\in\mathbb{N^*})$，一定有复数$c$使得$f(c)=0$。</strong></p><p>这个结论称为<strong>代数基本定理</strong>。</p><p>由代数基本定理，若找到$n$次多项式$f(x)$的一根$c$，将其除以因式$x-c$，所得多项式必然还有根。因此可继续上述步骤，直至多项式变为常数为止。在过程中共找到的$n$个根，都为原多项式$f(x)$的根。因此，可进一步推出：<strong>$n$次多项式$f(x)$在复数集内恰好有$n$个根。</strong>如果$x_1,x_2,\cdots,x_n$是$f(x)=\sum\limits_{k=1}^na_kx^k+a_0$的$n$个根，那么</p><script type="math/tex; mode=display">f(x)=a_n\prod_{k=1}^n(x-x_k)</script><p>这就是$f(x)$在复数集内的分解式。</p><p>回到原先的问题。同样地，设一元$n$次方程$f(x)=0$的根为$x_1,x_2,\cdots,x_n$，那么，有</p><script type="math/tex; mode=display">\sum_{k=1}^n+a_0=a_n\prod_{k=1}^n(x-x_k)</script><p>比较等号两边的常数项。左边的常数项很容易看出是$a_0$。右边的常数项应该是每个因式中的常数项的乘积，即$a_n\prod\limits_{k=1}^n(-x_k)$，可化简为$(-1)^na_n\prod\limits_{k=1}^nx_k$。等号两边的常数项必然相等，因此，显然有</p><script type="math/tex; mode=display">a_0=(-1)^na_n\prod_{k=1}^nx_k</script><p>变形，即得韦达定理一般形式中的第一个结论：</p><script type="math/tex; mode=display">\prod_{k=1}^nx_k=(-1)^n\frac{a_0}{a_n}</script><p>下面求$\sum\limits_{k=1}^nx_k$​。根据我们推上一个结论的经验，只需在等号两边找出一项，且使得这一项在等号右边的系数包含$\sum\limits_{k=1}^nx_k$​这一因子即可。这一项在等号右边，必然是将所有从$n$​个括号中挑选出$n-1$​个$x$​，再挑选出一个常数项$-x_k$​相乘得到的项求和得来。因此，我们考虑$x$​的$n-1$​次项。于是有</p><script type="math/tex; mode=display">a_{n-1}=a_n\sum_{k=1}^n(-x_k)</script><p>变形即得</p><script type="math/tex; mode=display">\sum_{k=1}^nx_k=-\frac{a_{n-1}}{a_n}</script><p>于是，我们就推出了一元$n$次方程$\sum\limits_{k=1}^na_kx^k+a_0=0$的韦达定理：</p><script type="math/tex; mode=display">\left\{\begin{aligned}&\prod_{k=1}^nx_k=(-1)^n\frac{a_0}{a_n}\\&\sum_{k=1}^nx_k=-\frac{a_{n-1}}{a_n}\end{aligned}\right.</script><p>这是韦达定理的一般形式。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
          <category> 代数 </category>
          
          <category> 多项式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 因式分解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P2308【添加括号】</title>
      <link href="2020/11/05/%E9%A2%98%E8%A7%A3%20P2308%E3%80%90%E6%B7%BB%E5%8A%A0%E6%8B%AC%E5%8F%B7%E3%80%91/"/>
      <url>2020/11/05/%E9%A2%98%E8%A7%A3%20P2308%E3%80%90%E6%B7%BB%E5%8A%A0%E6%8B%AC%E5%8F%B7%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2308">P2308 添加括号</a></p><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><span id="more"></span><p>给定一个正整数序列$a_1,a_2,\cdots,a_n,(1\le n\le20)$</p><p>不改变序列中每个元素在序列中的位置，把它们相加，并用括号记每次加法所得的和，称为中间和。</p><p>例如:</p><p>给出序列是$4,1,2,3$。</p><p>第一种添括号方法:</p><p>$((4+1)+(2+3))=((5)+(5))=(10)$</p><p>有三个中间和是$5,5,10$，它们之和为:$5+5+10=20$</p><p>第二种添括号方法</p><p>$(4+((1+2)+3))=(4+((3)+3))=(4+(6))=(10)$</p><p>中间和是$3,6,10$，它们之和为$19$。</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>现在要添上$n-1$对括号，加法运算依括号顺序进行，得到$n-1$个中间和，求出使中间和之和最小的添括号方法。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共两行。第一行，为整数$n(1\le n\le20)$。第二行，为$a_1,a_2,\cdots,a_n$这$n$个正整数，每个数字不超过$100$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出$3$行。第一行，为添加括号的方法。第二行，为最终的中间和之和。第三行，为$n-1$个中间和，按照从里到外，从左到右的顺序输出。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>很明显，此题是一道区间dp。<del>（有两个点多解，数据过于毒瘤，害我调了好久，请求开启SPJ @chen_zhe）</del></p><p>定义状态$f[i][j]$表示区间$[i,j]$的最小的中间和之和。区间dp的状态转移是按照区间长度从小到大进行，因此$[i,j]$必然由更小的区间转移而来。当然，为了转移时更方便计算中间和，我们使用前缀和$s[i]$来存储$\sum\limits_{k=1}^ia_k$。</p><p>考虑$k\in[i,j-1]$中的任意断点$k$，可将区间分成两个部分$[i,k]$和$[k+1,j]$，那么有</p><script type="math/tex; mode=display">f[i][j]=\min_{k\in[i,j-1]}\{f[i][k]+f[k+1][j]+s[j]-s[i-1]\}</script><p>即区间$[i,k]$与区间$[k+1,j]$的最小中间和之和相加，再加上当前合并得到的中间和。上述即为状态转移方程。</p><p>当然本题还需注意最后的输出：我们用$h[i][j]$来存储区间$[i,j]$的断点，每一个区间分成两段，递归输出即可。</p><p>其余详见代码。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">21</span>][<span class="number">21</span>],s[<span class="number">21</span>],h[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">// 输出添加括号方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;<span class="comment">// 区间只有一个数，输出并回溯</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[l]-s[l<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">print1(l,h[l][r]);<span class="comment">// 输出左半段</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">print1(h[l][r]+<span class="number">1</span>,r);<span class="comment">// 输出右半段</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">// 输出中间和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;<span class="comment">// 区间只有一个数，不存在中间和，回溯</span></span><br><span class="line">print2(l,h[l][r]);<span class="comment">// 输出左半段</span></span><br><span class="line">print2(h[l][r]+<span class="number">1</span>,r);<span class="comment">// 输出右半段</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">// 输出当前区间中间和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,l,a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">f[i][i]=<span class="number">0</span>;<span class="comment">// 初始化只有一个数的区间最小的中间和之和为0</span></span><br><span class="line">s[i]=s[i<span class="number">-1</span>]+a;<span class="comment">// 前缀和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">2</span>;l&lt;=n;l++)<span class="comment">// 第一层枚举区间长度，从2~n</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n-l+<span class="number">1</span>;i++)<span class="comment">// 第二层枚举区间左端点</span></span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;i+l<span class="number">-1</span>;j++)<span class="comment">// 第三层枚举断点</span></span><br><span class="line"><span class="keyword">if</span>(f[i][j]+f[j+<span class="number">1</span>][i+l<span class="number">-1</span>]+s[i+l<span class="number">-1</span>]-s[i<span class="number">-1</span>]&lt;=f[i][i+l<span class="number">-1</span>])&#123; <span class="comment">// 毒瘤数据！必须写成&lt;=才能过，&lt;过不了</span></span><br><span class="line">f[i][i+l<span class="number">-1</span>]=f[i][j]+f[j+<span class="number">1</span>][i+l<span class="number">-1</span>]+s[i+l<span class="number">-1</span>]-s[i<span class="number">-1</span>];<span class="comment">// 更新f[i][j]</span></span><br><span class="line">h[i][i+l<span class="number">-1</span>]=j;<span class="comment">// 储存断点</span></span><br><span class="line">&#125;</span><br><span class="line">print1(<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt;f[<span class="number">1</span>][n]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">print2(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 信息学奥赛/OI </category>
          
          <category> 动态规划/dp </category>
          
          <category> 区间dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息学奥赛/OI </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P1352【没有上司的舞会】</title>
      <link href="2020/08/10/%E9%A2%98%E8%A7%A3%20P1352%E3%80%90%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A%E3%80%91/"/>
      <url>2020/08/10/%E9%A2%98%E8%A7%A3%20P1352%E3%80%90%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1352">P1352 没有上司的舞会</a></p><p>本蒟蒻的第一篇题解~</p><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><span id="more"></span><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>某大学有$n$个职员，编号为$1\cdots n$。他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数$r_i$，但是呢，如果某个职员的直接上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行是一个整数$n$。$(1\le n\le6000)$</p><p>第$2$到第$(n+1)$行，第$(i+1)$行的整数表示$i$号职员的快乐指数$r_i$。$(-128\le r_i\le127)$</p><p>第$(n+2)$到第$2n$行，每行输入一对整数$l,k$,代表$k$是$l$的直接上司。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行一个整数代表最大的快乐指数。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p><del>我刚学树形dp写对了一道题就来写题解</del></p><p>定义数组$f[maxn+1][2]$，其中$f[x][0]$表示以$x$为子树树根的子树在$x$不参加舞会时的最大快乐值，$f[x][1]$表示以$x$为子树树根的子树在$x$参加舞会时的最大快乐值。</p><p>根据题目描述可知，上司去了，下属一定不去；上司不去，下属可去可不去。则可得</p><script type="math/tex; mode=display">f[x][1]=r[x]+\sum_{y\in x的儿子} f[y][0]</script><p>即将每个下属不去时得到的快乐值累加再加上$x$去时得到的快乐值</p><script type="math/tex; mode=display">f[x][0]=\sum_{y\in x的儿子}\max(f[y][0],f[y][1])</script><p>即将每个下属去或不去得到的快乐值中选最大值再累加</p><p>得到了状态转移方程，只要找到根$root$，直接$dfs(root)$即可。</p><p>其余详见代码。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p><del>我知道你们只看这个</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r[<span class="number">6001</span>],head[<span class="number">6001</span>],f[<span class="number">6001</span>][<span class="number">2</span>],cnt;<span class="comment">//f数组的意义如上所述</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="comment">//前向星存图</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;edge[<span class="number">6001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span><span class="comment">//连边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].next=head[from];</span><br><span class="line">edge[cnt].to=to;</span><br><span class="line">head[from]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> not_root[<span class="number">6001</span>];<span class="comment">//为了找根而开辟的数组，not_root[x]=1表示x不是根</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//树形dp</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[x][<span class="number">1</span>]=r[x];<span class="comment">//f[x][1]初始设置为自己的快乐值</span></span><br><span class="line">f[x][<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">//f[x][0]初始设置为0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=edge[i].next)&#123;<span class="comment">//遍历x的连边</span></span><br><span class="line">dfs(edge[i].to);<span class="comment">//先计算儿子</span></span><br><span class="line">f[x][<span class="number">1</span>]+=f[edge[i].to][<span class="number">0</span>];</span><br><span class="line">f[x][<span class="number">0</span>]+=max(f[edge[i].to][<span class="number">0</span>],f[edge[i].to][<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//这两个式子的意义如上所述</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,l,k,root;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;r[i];<span class="comment">//输入</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;k;</span><br><span class="line">add_edge(k,l);<span class="comment">//单向连边，只连父亲到儿子即可</span></span><br><span class="line">not_root[l]=<span class="number">1</span>;<span class="comment">//是儿子肯定不是根</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!not_root[i])&#123;<span class="comment">//找根</span></span><br><span class="line">root=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(root);<span class="comment">//从根开始dp</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;max(f[root][<span class="number">0</span>],f[root][<span class="number">1</span>]);<span class="comment">//输出根节点去和不去时所得快乐值中的最大值</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 信息学奥赛/OI </category>
          
          <category> 动态规划/dp </category>
          
          <category> 树形dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息学奥赛/OI </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

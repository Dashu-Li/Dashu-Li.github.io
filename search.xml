<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>试根法浅析</title>
      <link href="2021/03/09/%E8%AF%95%E6%A0%B9%E6%B3%95%E6%B5%85%E6%9E%90/"/>
      <url>2021/03/09/%E8%AF%95%E6%A0%B9%E6%B3%95%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="余数定理"><a href="#余数定理" class="headerlink" title="余数定理"></a>余数定理</h3><p>对于$n$次多项式$f(x)=\sum\limits_{k=1}^na_kx^k+a_0$，如果我们用一次多项式$x-c$作除式去除多项式$f(x)$，那么所得余式必为一个常数。不妨设这时商式为$g(x)$，余式（余数）为$r$，则：</p><span id="more"></span><script type="math/tex; mode=display">f(x)=(x-c)g(x)+r</script><p>即被除式等于除式乘以商式再加余式。</p><p>令$x=c$，便得到：</p><script type="math/tex; mode=display">f(c)=0+r=r</script><p>因此，我们有</p><p><strong>$\qquad$$x-c$除$f(x)$时，所得的余数为$f(c)$。</strong></p><p>这个结论被称为<strong>余数定理</strong>。</p><h3 id="试根法分解因式"><a href="#试根法分解因式" class="headerlink" title="试根法分解因式"></a>试根法分解因式</h3><p>在上面的推导中，若余数是$0$，那么$f(x)$被$x-c$整除，也就是$x-c$是$f(x)$的因式。反过来，若$x-c$是$f(x)$的因式，那么$f(x)$被$x-c$整除，余数是$0$。因此，我们有</p><p><strong>$\qquad$如果$f(c)=0$，那么$x-c$是$f(x)$的因式。反过来，如果$x-c$是$f(x)$的因式，那么$f(c)=0$。</strong></p><p>因此，想要分解$f(x)$，只需找出一个$c$，使得$f(c)=0$，那么$f(x)$必可分解出因式$x-c$。</p><p>如果$f(c)=0$，那么就说$c$是多项式$f(x)$的根。因此，在$c$是$f(x)$的根时，$x-c$是$f(x)$的因式。</p><h3 id="有理根的求法"><a href="#有理根的求法" class="headerlink" title="有理根的求法"></a>有理根的求法</h3><p>我们假定$f(x)=\sum\limits_{k=1}^na_kx^k+a_0$是整系数多项式，也就是说$a_n,a_{n-1},\cdots,a_1,a_0\in\mathbb{Z}$。又设有理数$c=\frac{p}{q}$是$f(x)$的根，$(p,q)=1$。</p><p>由于$f(c)=0$，即</p><script type="math/tex; mode=display">a_n\left(\frac{p}{q}\right)^n+a_{n-1}\left(\frac{p}{q}\right)^{n-1}+\cdots+a_1\left(\frac{p}{q}\right)+a_0=0</script><p>两边同乘$q^n$得</p><script type="math/tex; mode=display">a_np^n+a_{n-1}p^{n-1}q+\cdots+a_1pq^{n-1}+a_0q^n=0</script><p>该式右边被$p$整除，所以它的左边也被$p$整除。显然，左边的前$n$项都被$p$整除，所以最后一项$a_0q^n$也被$p$整除，但$(p,q)=1$，所以$p|a_0$，即$p$是$a_0$的因数。同样地，$q$应当整除$a_np^n$，从而$q$是$a_n$的因数。于是，可得</p><p><strong>$\qquad$有理根$c=\frac{p}{q}$的分子$p$是常数项$a_0$的因数，分母$q$是首项系数$a_n$的因数。</strong></p><p>据此，我们就可以有的放矢地将有理数代入$f(x)$进行试根。当找出一个有理根$c$后，便可根据第二部分的结论分解出因式$x-c$。</p><p>不过需要注意的是，这个结论仅适用于整系数多项式。对于非整系数多项式，需要先将其化为整系数多项式，再进行试根。</p><h3 id="应用：二次式的分解"><a href="#应用：二次式的分解" class="headerlink" title="应用：二次式的分解"></a>应用：二次式的分解</h3><p>对于$x$的二次式$ax^2+bx+c$在复数集内的分解，可以先利用求根公式求出它的根：</p><script type="math/tex; mode=display">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</script><p>从而，可分解为：</p><script type="math/tex; mode=display">ax^2+bx+c=a\left(x-\frac{-b+\sqrt{b^2-4ac}}{2a}\right)\left(x-\frac{-b-\sqrt{b^2-4ac}}{2a}\right)</script><p>在实数集内，当$b^2-4ac\ge0$时，$ax^2+bx+c$也可以这样分解。如果$b^2-4ac&lt;0$，那么$ax^2+bx+c$是实数集内的既约多项式。</p><h3 id="应用：韦达定理的推广"><a href="#应用：韦达定理的推广" class="headerlink" title="应用：韦达定理的推广"></a>应用：韦达定理的推广</h3><p>韦达定理阐释了一元二次方程的根与系数关系。那么，一元$n$次方程是否有类似结论呢？</p><p><strong>$\qquad$在复数集内，每一个$x$的（不是常数的）多项式至少有一个根。即对于多项式$f(x)=\sum\limits_{k=1}^na_kx^k+a_0(n\in\mathbb{N^*})$，一定有复数$c$使得$f(c)=0$。</strong></p><p>这个结论称为<strong>代数基本定理</strong>。</p><p>由代数基本定理，若找到$n$次多项式$f(x)$的一根$c$，将其除以因式$x-c$，所得多项式必然还有根。因此可继续上述步骤，直至多项式变为常数为止。在过程中共找到的$n$个根，都为原多项式$f(x)$的根。因此，可进一步推出：<strong>$n$次多项式$f(x)$在复数集内恰好有$n$个根。</strong>如果$x_1,x_2,\cdots,x_n$是$f(x)=\sum\limits_{k=1}^na_kx^k+a_0$的$n$个根，那么</p><script type="math/tex; mode=display">f(x)=a_n\prod_{k=1}^n(x-x_k)</script><p>这就是$f(x)$在复数集内的分解式。</p><p>回到原先的问题。同样地，设一元$n$次方程$f(x)=0$的根为$x_1,x_2,\cdots,x_n$，那么，有</p><script type="math/tex; mode=display">\sum_{k=1}^n+a_0=a_n\prod_{k=1}^n(x-x_k)</script><p>比较等号两边的常数项。左边的常数项很容易看出是$a_0$。右边的常数项应该是每个因式中的常数项的乘积，即$a_n\prod\limits_{k=1}^n(-x_k)$，可化简为$(-1)^na_n\prod\limits_{k=1}^nx_k$。等号两边的常数项必然相等，因此，显然有</p><script type="math/tex; mode=display">a_0=(-1)^na_n\prod_{k=1}^nx_k</script><p>变形，即得韦达定理一般形式中的第一个结论：</p><script type="math/tex; mode=display">\prod_{k=1}^nx_k=(-1)^n\frac{a_0}{a_n}</script><p>下面求$\sum\limits_{k=1}^nx_k$。根据我们推上一个结论的经验，只需在等号两边找出一项，且使得这一项在等号右边的系数包含$\sum\limits_{k=1}^nx_k$这一因子即可。这一项在等号右边，必然是将所有从$n$个括号中挑选出$n-1$个$x$，再挑选出一个常数项$-x_k$相乘得到的项再相加得来。因此，我们考虑$x$的$n-1$次项。于是有</p><script type="math/tex; mode=display">a_{n-1}=a_n\sum_{k=1}^n(-x_k)</script><p>变形即得</p><script type="math/tex; mode=display">\sum_{k=1}^nx_k=-\frac{a_{n-1}}{a_n}</script><p>于是，我们就推出了一元$n$次方程$\sum\limits_{k=1}^na_kx^k+a_0=0$的韦达定理：</p><script type="math/tex; mode=display">\left\{\begin{aligned}&\prod_{k=1}^nx_k=(-1)^n\frac{a_0}{a_n}\\&\sum_{k=1}^nx_k=-\frac{a_{n-1}}{a_n}\end{aligned}\right.</script><p>这是韦达定理的一般形式。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
          <category> 代数 </category>
          
          <category> 多项式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 因式分解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P2308【添加括号】</title>
      <link href="2020/11/05/%E9%A2%98%E8%A7%A3%20P2308%E3%80%90%E6%B7%BB%E5%8A%A0%E6%8B%AC%E5%8F%B7%E3%80%91/"/>
      <url>2020/11/05/%E9%A2%98%E8%A7%A3%20P2308%E3%80%90%E6%B7%BB%E5%8A%A0%E6%8B%AC%E5%8F%B7%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2308">P2308 添加括号</a></p><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>给定一个正整数序列$a_1,a_2,\cdots,a_n,(1\le n\le20)$</p><span id="more"></span><p>不改变序列中每个元素在序列中的位置，把它们相加，并用括号记每次加法所得的和，称为中间和。</p><p>例如:</p><p>给出序列是$4,1,2,3$。</p><p>第一种添括号方法:</p><p>$((4+1)+(2+3))=((5)+(5))=(10)$</p><p>有三个中间和是$5,5,10$，它们之和为:$5+5+10=20$</p><p>第二种添括号方法</p><p>$(4+((1+2)+3))=(4+((3)+3))=(4+(6))=(10)$</p><p>中间和是$3,6,10$，它们之和为$19$。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>现在要添上$n-1$对括号，加法运算依括号顺序进行，得到$n-1$个中间和，求出使中间和之和最小的添括号方法。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>共两行。第一行，为整数$n(1\le n\le20)$。第二行，为$a_1,a_2,\cdots,a_n$这$n$个正整数，每个数字不超过$100$。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出$3$行。第一行，为添加括号的方法。第二行，为最终的中间和之和。第三行，为$n-1$个中间和，按照从里到外，从左到右的顺序输出。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>很明显，此题是一道区间dp。<del>（有两个点多解，数据过于毒瘤，害我调了好久，请求开启SPJ @chen_zhe）</del></p><p>定义状态$f[i][j]$表示区间$[i,j]$的最小的中间和之和。区间dp的状态转移是按照区间长度从小到大进行，因此$[i,j]$必然由更小的区间转移而来。当然，为了转移时更方便计算中间和，我们使用前缀和$s[i]$来存储$\sum\limits_{k=1}^ia_k$。</p><p>考虑$k\in[i,j-1]$中的任意断点$k$，可将区间分成两个部分$[i,k]$和$[k+1,j]$，那么有</p><script type="math/tex; mode=display">f[i][j]=\min_{k\in[i,j-1]}\{f[i][k]+f[k+1][j]+s[j]-s[i-1]\}</script><p>即区间$[i,k]$与区间$[k+1,j]$的最小中间和之和相加，再加上当前合并得到的中间和。上述即为状态转移方程。</p><p>当然本题还需注意最后的输出：我们用$h[i][j]$来存储区间$[i,j]$的断点，每一个区间分成两段，递归输出即可。</p><p>其余详见代码。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">21</span>][<span class="number">21</span>],s[<span class="number">21</span>],h[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">// 输出添加括号方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;<span class="comment">// 区间只有一个数，输出并回溯</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[l]-s[l<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">print1(l,h[l][r]);<span class="comment">// 输出左半段</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">print1(h[l][r]+<span class="number">1</span>,r);<span class="comment">// 输出右半段</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">// 输出中间和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;<span class="comment">// 区间只有一个数，不存在中间和，回溯</span></span><br><span class="line">print2(l,h[l][r]);<span class="comment">// 输出左半段</span></span><br><span class="line">print2(h[l][r]+<span class="number">1</span>,r);<span class="comment">// 输出右半段</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">// 输出当前区间中间和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,l,a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">f[i][i]=<span class="number">0</span>;<span class="comment">// 初始化只有一个数的区间最小的中间和之和为0</span></span><br><span class="line">s[i]=s[i<span class="number">-1</span>]+a;<span class="comment">// 前缀和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">2</span>;l&lt;=n;l++)<span class="comment">// 第一层枚举区间长度，从2~n</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n-l+<span class="number">1</span>;i++)<span class="comment">// 第二层枚举区间左端点</span></span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;i+l<span class="number">-1</span>;j++)<span class="comment">// 第三层枚举断点</span></span><br><span class="line"><span class="keyword">if</span>(f[i][j]+f[j+<span class="number">1</span>][i+l<span class="number">-1</span>]+s[i+l<span class="number">-1</span>]-s[i<span class="number">-1</span>]&lt;=f[i][i+l<span class="number">-1</span>])&#123; <span class="comment">// 毒瘤数据！必须写成&lt;=才能过，&lt;过不了</span></span><br><span class="line">f[i][i+l<span class="number">-1</span>]=f[i][j]+f[j+<span class="number">1</span>][i+l<span class="number">-1</span>]+s[i+l<span class="number">-1</span>]-s[i<span class="number">-1</span>];<span class="comment">// 更新f[i][j]</span></span><br><span class="line">h[i][i+l<span class="number">-1</span>]=j;<span class="comment">// 储存断点</span></span><br><span class="line">&#125;</span><br><span class="line">print1(<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt;f[<span class="number">1</span>][n]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">print2(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 信息学奥赛/OI </category>
          
          <category> 动态规划/dp </category>
          
          <category> 区间dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息学奥赛/OI </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P1352【没有上司的舞会】</title>
      <link href="2020/08/10/%E9%A2%98%E8%A7%A3%20P1352%E3%80%90%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A%E3%80%91/"/>
      <url>2020/08/10/%E9%A2%98%E8%A7%A3%20P1352%E3%80%90%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1352">P1352 没有上司的舞会</a></p><p>本蒟蒻的第一篇题解~</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><span id="more"></span><p>某大学有$n$个职员，编号为$1\cdots n$。他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数$r_i$，但是呢，如果某个职员的直接上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行是一个整数$n$。$(1\le n\le6000)$</p><p>第$2$到第$(n+1)$行，第$(i+1)$行的整数表示$i$号职员的快乐指数$r_i$。$(-128\le r_i\le127)$</p><p>第$(n+2)$到第$2n$行，每行输入一对整数$l,k$,代表$k$是$l$的直接上司。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行一个整数代表最大的快乐指数。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><del>我刚学树形dp写对了一道题就来写题解</del></p><p>定义数组$f[maxn+1][2]$，其中$f[x][0]$表示以$x$为子树树根的子树在$x$不参加舞会时的最大快乐值，$f[x][1]$表示以$x$为子树树根的子树在$x$参加舞会时的最大快乐值。</p><p>根据题目描述可知，上司去了，下属一定不去；上司不去，下属可去可不去。则可得</p><script type="math/tex; mode=display">f[x][1]=r[x]+\sum_{y\in x的儿子} f[y][0]</script><p>即将每个下属不去时得到的快乐值累加再加上$x$去时得到的快乐值</p><script type="math/tex; mode=display">f[x][0]=\sum_{y\in x的儿子}\max(f[y][0],f[y][1])</script><p>即将每个下属去或不去得到的快乐值中选最大值再累加</p><p>得到了状态转移方程，只要找到根$root$，直接$dfs(root)$即可。</p><p>其余详见代码。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><del>我知道你们只看这个</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r[<span class="number">6001</span>],head[<span class="number">6001</span>],f[<span class="number">6001</span>][<span class="number">2</span>],cnt;<span class="comment">//f数组的意义如上所述</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="comment">//前向星存图</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;edge[<span class="number">6001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span><span class="comment">//连边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].next=head[from];</span><br><span class="line">edge[cnt].to=to;</span><br><span class="line">head[from]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> not_root[<span class="number">6001</span>];<span class="comment">//为了找根而开辟的数组，not_root[x]=1表示x不是根</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//树形dp</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[x][<span class="number">1</span>]=r[x];<span class="comment">//f[x][1]初始设置为自己的快乐值</span></span><br><span class="line">f[x][<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">//f[x][0]初始设置为0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=edge[i].next)&#123;<span class="comment">//遍历x的连边</span></span><br><span class="line">dfs(edge[i].to);<span class="comment">//先计算儿子</span></span><br><span class="line">f[x][<span class="number">1</span>]+=f[edge[i].to][<span class="number">0</span>];</span><br><span class="line">f[x][<span class="number">0</span>]+=max(f[edge[i].to][<span class="number">0</span>],f[edge[i].to][<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//这两个式子的意义如上所述</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,l,k,root;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;r[i];<span class="comment">//输入</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;k;</span><br><span class="line">add_edge(k,l);<span class="comment">//单向连边，只连父亲到儿子即可</span></span><br><span class="line">not_root[l]=<span class="number">1</span>;<span class="comment">//是儿子肯定不是根</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!not_root[i])&#123;<span class="comment">//找根</span></span><br><span class="line">root=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(root);<span class="comment">//从根开始dp</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;max(f[root][<span class="number">0</span>],f[root][<span class="number">1</span>]);<span class="comment">//输出根节点去和不去时所得快乐值中的最大值</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 信息学奥赛/OI </category>
          
          <category> 动态规划/dp </category>
          
          <category> 树形dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息学奥赛/OI </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
